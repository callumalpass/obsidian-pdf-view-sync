/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var u=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var S=(h,c)=>{for(var e in c)u(h,e,{get:c[e],enumerable:!0})},D=(h,c,e,t)=>{if(c&&typeof c=="object"||typeof c=="function")for(let a of v(c))!w.call(h,a)&&a!==e&&u(h,a,{get:()=>c[a],enumerable:!(t=P(c,a))||t.enumerable});return h};var y=h=>D(u({},"__esModule",{value:!0}),h);var $={};S($,{default:()=>d});module.exports=y($);var s=require("obsidian"),b={associatedNoteTemplate:"@{{pdf_basename}}.md",frontmatterKey:"pdf-view-state",enableStateSaving:!0,enableStateLoading:!0,createAssociatedNote:!1},d=class extends s.Plugin{constructor(){super(...arguments);this.openPDFs=new Map}async onload(){await this.loadSettings(),this.addSettingTab(new m(this.app,this)),this.registerEvent(this.app.workspace.on("file-open",e=>{this.handleFileOpen(e)})),this.registerEvent(this.app.workspace.on("layout-change",()=>{this.checkForClosedPDFs()})),this.registerEvent(this.app.workspace.on("active-leaf-change",e=>{e&&e.view&&!this.isPDFView(e.view)&&this.saveAllPDFStates()})),this.registerInterval(window.setInterval(()=>{this.saveAllPDFStates()},30*1e3)),this.app.workspace.onLayoutReady(()=>{this.trackOpenPDFs()}),console.log("PDF View Sync plugin loaded")}saveAllPDFStates(){console.log("Saving state for all open PDFs...");for(let e of this.openPDFs.values())this.savePDFState(e)}trackOpenPDFs(){this.app.workspace.iterateAllLeaves(e=>{let t=e.view;if(this.isPDFView(t)){let a=t.file;a&&this.openPDFs.set(a.path,t)}})}checkForClosedPDFs(){let e=new Set;this.app.workspace.iterateAllLeaves(t=>{let a=t.view;this.isPDFView(a)&&a.file&&e.add(a.file.path)});for(let[t,a]of this.openPDFs.entries())e.has(t)||(this.savePDFState(a),this.openPDFs.delete(t));this.app.workspace.iterateAllLeaves(t=>{let a=t.view;this.isPDFView(a)&&a.file&&(this.openPDFs.has(a.file.path)||this.openPDFs.set(a.file.path,a))})}isPDFView(e){return e&&e.file&&e.file.extension==="pdf"}async handleFileOpen(e){if(!this.settings.enableStateLoading||!e||!(e instanceof s.TFile)||e.extension!=="pdf")return;let t=this.getActivePDFView();if(t)try{let a=this.getAssociatedNotePath(e.path);if(!a)return;let o=this.app.vault.getAbstractFileByPath(a);if(!o||!(o instanceof s.TFile)){console.log(`Associated note not found for ${e.path}`);return}let i=null,g=this.app.metadataCache.getCache(a);if(g&&g.frontmatter)i=g.frontmatter;else{let r=(await this.app.vault.read(o)).match(/^---\n([\s\S]*?)\n---/);if(r)try{i=(0,s.parseYaml)(r[1])}catch(p){console.error("Error parsing frontmatter:",p)}}if(i&&i[this.settings.frontmatterKey]!==void 0){let n=i[this.settings.frontmatterKey];console.log("Found PDF state in frontmatter:",n);let r=typeof n=="number"?n:typeof n=="object"&&n.page!==void 0?n.page:null;if(console.log(`Parsed page number: ${r}`),r!==null){let p=t.getState();console.log(`Current PDF state: page ${p==null?void 0:p.page}`),setTimeout(async()=>{try{let l={page:r};console.log("Setting state to:",l),await t.setState(l,{}),console.log(`Restored PDF state for ${e.path} to page ${r}`),new s.Notice(`Restored PDF to page ${r}`)}catch(l){console.error("Error setting PDF state:",l)}},500)}}else console.log(`No PDF state found in frontmatter for key: ${this.settings.frontmatterKey}`)}catch(a){console.error(`Error loading PDF state for ${e.path}:`,a)}}async savePDFState(e){if(console.log("Attempting to save PDF state..."),!this.settings.enableStateSaving){console.log("State saving is disabled in settings");return}if(!e||!e.file){console.log("Invalid PDF view or missing file reference");return}try{let t=e.file.path;console.log(`Saving state for PDF: ${t}`);let a=e.getState();if(console.log("Retrieved state:",a),!a||a.page===void 0){console.log(`Could not get valid state for ${t}`);return}console.log(`Current page: ${a.page}`);let o=this.getAssociatedNotePath(t);if(!o){console.log("Could not determine associated note path");return}console.log(`Will save to note: ${o}`);let i=this.app.vault.getAbstractFileByPath(o);if(!i||!(i instanceof s.TFile))if(this.settings.createAssociatedNote)try{await this.app.vault.create(o,`---
${this.settings.frontmatterKey}: ${a.page}
---

`),new s.Notice(`Created note for PDF: ${o}`);return}catch(l){console.error(`Error creating associated note ${o}:`,l);return}else{console.log(`Associated note not found for ${t}`);return}let g=await this.app.vault.read(i);console.log(`Read note content, length: ${g.length} characters`);let n=/^---\n([\s\S]*?)\n---/,r=g.match(n),p;if(r){console.log("Found existing frontmatter");try{let l=(0,s.parseYaml)(r[1]);console.log("Parsed frontmatter:",l),console.log(`Setting ${this.settings.frontmatterKey} to ${a.page}`),l[this.settings.frontmatterKey]=a.page;let f=(0,s.stringifyYaml)(l);console.log("Stringified updated frontmatter"),p=g.replace(n,`---
${f}---`)}catch(l){console.error("Error parsing frontmatter:",l);let f=r[1];console.log("Adding our key to existing frontmatter as text");let F=`${f}
${this.settings.frontmatterKey}: ${a.page}`;p=g.replace(n,`---
${F}
---`)}}else console.log("No frontmatter found, creating new frontmatter block"),p=`---
${this.settings.frontmatterKey}: ${a.page}
---

${g}`;console.log("Writing updated content back to note"),await this.app.vault.modify(i,p),console.log(`Successfully saved PDF state for ${t} at page ${a.page}`)}catch(t){console.error("Error saving PDF state:",t)}}getActivePDFView(){let e=null,t=this.app.workspace.activeLeaf;return t&&t.view&&this.isPDFView(t.view)&&(e=t.view),e}getAssociatedNotePath(e){try{let t=this.app.vault.getAbstractFileByPath(e);if(!t||!(t instanceof s.TFile))return null;let a=t.name,o=a.replace(/\.pdf$/i,""),i=t.parent?t.parent.path:"",g=t.parent?t.parent.name:"",n=this.settings.associatedNoteTemplate.replace(/{{pdf_filename}}/g,a).replace(/{{pdf_basename}}/g,o).replace(/{{pdf_folder_path}}/g,i).replace(/{{pdf_parent_folder_name}}/g,g);return n.startsWith("/")&&(n=n.substring(1)),console.log(`PDF path: ${e}, Associated note path: ${n}`),n}catch(t){return console.error("Error calculating associated note path:",t),null}}onunload(){for(let e of this.openPDFs.values())this.savePDFState(e);console.log("PDF View Sync plugin unloaded")}async loadSettings(){this.settings=Object.assign({},b,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},m=class extends s.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"PDF View State Sync Settings"}),new s.Setting(e).setName("Associated Note Path Template").setDesc("Template for locating/creating the associated note. Placeholders: {{pdf_filename}}, {{pdf_basename}}, {{pdf_folder_path}}, {{pdf_parent_folder_name}}").addText(t=>t.setPlaceholder("@{{pdf_basename}}.md").setValue(this.plugin.settings.associatedNoteTemplate).onChange(async a=>{this.plugin.settings.associatedNoteTemplate=a,await this.plugin.saveSettings()})),new s.Setting(e).setName("Frontmatter Key").setDesc("The key name under which the PDF state will be stored in the associated note's frontmatter").addText(t=>t.setPlaceholder("pdf-view-state").setValue(this.plugin.settings.frontmatterKey).onChange(async a=>{this.plugin.settings.frontmatterKey=a,await this.plugin.saveSettings()})),new s.Setting(e).setName("Enable State Saving").setDesc("Master switch to enable/disable the saving feature").addToggle(t=>t.setValue(this.plugin.settings.enableStateSaving).onChange(async a=>{this.plugin.settings.enableStateSaving=a,await this.plugin.saveSettings()})),new s.Setting(e).setName("Enable State Loading").setDesc("Master switch to enable/disable the loading feature").addToggle(t=>t.setValue(this.plugin.settings.enableStateLoading).onChange(async a=>{this.plugin.settings.enableStateLoading=a,await this.plugin.saveSettings()})),new s.Setting(e).setName("Create Associated Note").setDesc("If enabled, the plugin will create the associated note if it doesn't exist when trying to save state").addToggle(t=>t.setValue(this.plugin.settings.createAssociatedNote).onChange(async a=>{this.plugin.settings.createAssociatedNote=a,await this.plugin.saveSettings()}))}};
