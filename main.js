/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var y=(p,o)=>{for(var a in o)f(p,a,{get:o[a],enumerable:!0})},S=(p,o,a,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of P(o))!v.call(p,e)&&e!==a&&f(p,e,{get:()=>o[e],enumerable:!(t=F(o,e))||t.enumerable});return p};var D=p=>S(f({},"__esModule",{value:!0}),p);var N={};y(N,{default:()=>d});module.exports=D(N);var s=require("obsidian"),b={associatedNoteTemplate:"@{{pdf_basename}}.md",frontmatterKey:"pdf-view-state",enableStateSaving:!0,enableStateLoading:!0,createAssociatedNote:!1},d=class extends s.Plugin{constructor(){super(...arguments);this.openPDFs=new Map}async onload(){await this.loadSettings(),this.addSettingTab(new u(this.app,this)),this.registerEvent(this.app.workspace.on("file-open",a=>{this.handleFileOpen(a)})),this.registerEvent(this.app.workspace.on("layout-change",()=>{this.checkForClosedPDFs()})),this.app.workspace.onLayoutReady(()=>{this.trackOpenPDFs()}),console.log("PDF View Sync plugin loaded")}trackOpenPDFs(){this.app.workspace.iterateAllLeaves(a=>{let t=a.view;if(this.isPDFView(t)){let e=t.file;e&&this.openPDFs.set(e.path,t)}})}checkForClosedPDFs(){let a=new Set;this.app.workspace.iterateAllLeaves(t=>{let e=t.view;this.isPDFView(e)&&e.file&&a.add(e.file.path)});for(let[t,e]of this.openPDFs.entries())a.has(t)||(this.savePDFState(e),this.openPDFs.delete(t));this.app.workspace.iterateAllLeaves(t=>{let e=t.view;this.isPDFView(e)&&e.file&&(this.openPDFs.has(e.file.path)||this.openPDFs.set(e.file.path,e))})}isPDFView(a){return a&&a.file&&a.file.extension==="pdf"}async handleFileOpen(a){if(!this.settings.enableStateLoading||!a||!(a instanceof s.TFile)||a.extension!=="pdf")return;let t=this.getActivePDFView();if(t)try{let e=this.getAssociatedNotePath(a.path);if(!e)return;let r=this.app.vault.getAbstractFileByPath(e);if(!r||!(r instanceof s.TFile)){console.log(`Associated note not found for ${a.path}`);return}let i=null,l=this.app.metadataCache.getCache(e);if(l&&l.frontmatter)i=l.frontmatter;else{let c=(await this.app.vault.read(r)).match(/^---\n([\s\S]*?)\n---/);if(c)try{i=(0,s.parseYaml)(c[1])}catch(g){console.error("Error parsing frontmatter:",g)}}if(i&&i[this.settings.frontmatterKey]){let n=i[this.settings.frontmatterKey],c=typeof n=="number"?n:typeof n=="object"&&n.page!==void 0?n.page:null;c!==null&&(await t.setState({page:c},{}),console.log(`Restored PDF state for ${a.path} to page ${c}`))}}catch(e){console.error(`Error loading PDF state for ${a.path}:`,e)}}async savePDFState(a){if(!(!this.settings.enableStateSaving||!a||!a.file))try{let t=a.file.path,e=a.getState();if(!e||e.page===void 0){console.log(`Could not get state for ${t}`);return}let r=this.getAssociatedNotePath(t);if(!r)return;let i=this.app.vault.getAbstractFileByPath(r);if(!i||!(i instanceof s.TFile))if(this.settings.createAssociatedNote)try{await this.app.vault.create(r,`---
${this.settings.frontmatterKey}: ${e.page}
---

`),new s.Notice(`Created note for PDF: ${r}`);return}catch(h){console.error(`Error creating associated note ${r}:`,h);return}else{console.log(`Associated note not found for ${t}`);return}let l=await this.app.vault.read(i),n=/^---\n([\s\S]*?)\n---/,c=l.match(n),g;if(c)try{let h=(0,s.parseYaml)(c[1]);h[this.settings.frontmatterKey]=e.page;let m=(0,s.stringifyYaml)(h);g=l.replace(n,`---
${m}---`)}catch(h){console.error("Error parsing frontmatter:",h);let w=`${c[1]}
${this.settings.frontmatterKey}: ${e.page}`;g=l.replace(n,`---
${w}
---`)}else g=`---
${this.settings.frontmatterKey}: ${e.page}
---

${l}`;await this.app.vault.modify(i,g),console.log(`Saved PDF state for ${t} at page ${e.page}`)}catch(t){console.error("Error saving PDF state:",t)}}getActivePDFView(){let a=null,t=this.app.workspace.activeLeaf;return t&&t.view&&this.isPDFView(t.view)&&(a=t.view),a}getAssociatedNotePath(a){try{let t=this.app.vault.getAbstractFileByPath(a);if(!t||!(t instanceof s.TFile))return null;let e=t.name,r=e.replace(/\.pdf$/i,""),i=t.parent?t.parent.path:"",l=t.parent?t.parent.name:"",n=this.settings.associatedNoteTemplate.replace(/{{pdf_filename}}/g,e).replace(/{{pdf_basename}}/g,r).replace(/{{pdf_folder_path}}/g,i).replace(/{{pdf_parent_folder_name}}/g,l);return!n.startsWith("/")&&i&&(n=`${i}/${n}`),n}catch(t){return console.error("Error calculating associated note path:",t),null}}onunload(){for(let a of this.openPDFs.values())this.savePDFState(a);console.log("PDF View Sync plugin unloaded")}async loadSettings(){this.settings=Object.assign({},b,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},u=class extends s.PluginSettingTab{constructor(a,t){super(a,t);this.plugin=t}display(){let{containerEl:a}=this;a.empty(),a.createEl("h2",{text:"PDF View State Sync Settings"}),new s.Setting(a).setName("Associated Note Path Template").setDesc("Template for locating/creating the associated note. Placeholders: {{pdf_filename}}, {{pdf_basename}}, {{pdf_folder_path}}, {{pdf_parent_folder_name}}").addText(t=>t.setPlaceholder("@{{pdf_basename}}.md").setValue(this.plugin.settings.associatedNoteTemplate).onChange(async e=>{this.plugin.settings.associatedNoteTemplate=e,await this.plugin.saveSettings()})),new s.Setting(a).setName("Frontmatter Key").setDesc("The key name under which the PDF state will be stored in the associated note's frontmatter").addText(t=>t.setPlaceholder("pdf-view-state").setValue(this.plugin.settings.frontmatterKey).onChange(async e=>{this.plugin.settings.frontmatterKey=e,await this.plugin.saveSettings()})),new s.Setting(a).setName("Enable State Saving").setDesc("Master switch to enable/disable the saving feature").addToggle(t=>t.setValue(this.plugin.settings.enableStateSaving).onChange(async e=>{this.plugin.settings.enableStateSaving=e,await this.plugin.saveSettings()})),new s.Setting(a).setName("Enable State Loading").setDesc("Master switch to enable/disable the loading feature").addToggle(t=>t.setValue(this.plugin.settings.enableStateLoading).onChange(async e=>{this.plugin.settings.enableStateLoading=e,await this.plugin.saveSettings()})),new s.Setting(a).setName("Create Associated Note").setDesc("If enabled, the plugin will create the associated note if it doesn't exist when trying to save state").addToggle(t=>t.setValue(this.plugin.settings.createAssociatedNote).onChange(async e=>{this.plugin.settings.createAssociatedNote=e,await this.plugin.saveSettings()}))}};
